ChemSim Mission & Roadmap
=========================

Core Philosophy
---------------
- Everything emerges from electrons: accuracy flows from modeling electron behavior, potential energy surfaces, and resulting forces.
- Favor physically grounded approximations, scaling fidelity by layers so we can balance realism against performance.
- Preserve energy and charge conservation at every layer; visualizations should reflect physical state (energy, charge, orbitals).

Layered Simulation Strategy
---------------------------
Tier 1 – Classical Particle Layer
- Represent atoms as particles with position, velocity, charge, mass, and classical interatomic potentials (Lennard-Jones, Coulomb).
- Implement Newtonian dynamics (e.g., velocity Verlet), optional thermostats, and periodic boundaries to capture diffusion, phase changes, and basic bonding proxies.
- Establish temperature/pressure controls and basic visualization (atoms, bonds inferred from distances).
- Layer in heuristic bonding behavior: detect covalent vs ionic interactions using valence metadata, share or transfer electrons, and adjust charges accordingly for early chemistry feedback.
- Introduce phase-aware behaviors so gases expand to occupy volume while liquids maintain moderate spacing via gentle repulsion terms.
- Implement bonded stretch/angle potentials tied to force-field parameters and use thermostats/initial kinetic energy seeding so atoms remain dynamic during runs.

Tier 2 – Quantum-Inspired Bonding Layer
- Augment atoms with valence orbital data (occupancies, energies, spatial orientation).
- Use tight-binding or Hückel-style overlap calculations to determine bond formation, bond order, and angular preferences.
- Track HOMO/LUMO, partial charges, and allow environment factors (dielectric, fields) to influence bonding energetics.
- Reaction logic driven by energy surface evaluation rather than hard-coded rules.

Tier 3 – Dynamic Electron Layer
- Introduce simplified electron density elements or pseudo-particles experiencing nucleus-electron attraction and electron-electron repulsion.
- Approximate quantum confinement to visualize molecular orbitals, tunneling, and ionization processes dynamically.
- Leverage GPU acceleration or cached orbital maps to keep performance tractable.

Chemical Engine Components
--------------------------
- Atom module: real periodic data (Z, valence electrons, electronegativity, radius, ionization energy) with derived properties computed on demand.
- Orbital interaction system: evaluates overlaps, energy changes, and bond types (covalent, ionic, metallic) and tracks bond strength/length/order.
- Energy management: ensure bond formation/breaking impacts local temperature and energy distribution consistently.
- Reaction pathway finder: monitor potential energy surfaces for spontaneous rearrangements; integrate reactive force fields (ReaxFF-like) for dynamic bonding.
- Bonding & intermolecular force strategy (see `docs/bonding_research.md`):
  * Short range: provide functional plug-ins for harmonic/Morse stretch, angle, dihedral, and improper terms. Defaults target OPLS/AMBER/GAFF-like parameters, with transition to bond-order/reactive schemes (ReaxFF, COMB, AIREBO) for Tier 2.
  * Charge handling: support static partial charges for classical force fields, QEq/ACKS2 charge equilibration for reactive models, and optional polarizable terms (Drude/induced dipoles) for advanced runs.
  * Nonbonded interactions: modular pair_style registry (Lennard-Jones, Buckingham, Mie, Morse, Coulomb, multipole) with PME/Ewald long-range electrostatics. Allow anisotropic terms for hydrogen bonding, π-stacking, and halogen bonding via off-center sites.
  * Many-body enhancements: enable optional three-body dispersion (Axilrod–Teller) or machine-learned potentials (GAP/NequIP) for high-accuracy tiers.
  * Algorithms: Verlet neighbor lists with adaptive buffers, optional constraint solvers (SHAKE/RATTLE) for stiff bonds, multi-time-step (RESPA) integrators, Nosé–Hoover/Langevin thermostats and barostats.
  * Parameterization workflow: ingest literature/UFF/GAFF/ReaxFF parameter sets, expose YAML/JSON schema for overrides, and surface provenance in the UI. Provide baseline presets (water, hydrocarbons, ionic lattices) plus benchmarking harness against NIST/Materials Project datasets.

User-Facing Tools
-----------------
- Atom inspector: orbital diagrams, ionization/affinity data, manipulate electron states, observe partial charges and dipoles.
- Molecule analyzer: live bond metrics, energy readouts, molecular orbitals, electron density, vibrational modes, and spectroscopy previews.
- Environment controls: temperature, pressure, EM fields, photon sources, solvent dielectric; visualize field lines and energy transfer.

Visual & Educational Enhancements
---------------------------------
- Render electron densities and orbitals using authentic spherical harmonics; animate bond vibrations and temperature-based coloration.
- Provide spectroscopy modes (IR, Raman, UV-Vis), isotopic substitutions, photochemistry triggers, and catalytic surface modeling as stretch goals.

Visualization & UI Framework Plan
---------------------------------
- Adopt `pygame` as the primary 2D rendering and input framework for early prototypes to balance rapid iteration with custom visualization needs; keep abstraction layer to allow future migration to GPU-accelerated engines if required.
- Window layout concept:
  * Left/central pane: interactive sandbox canvas showing atoms, bonds, fields, and electron densities with zoom/pan and timeline scrubber controls.
  * Right pane: dynamic periodic table with clickable elements, search/filter, and context-sensitive data (atomic properties, suggested orbitals).
  * Bottom/status bar: simulation status (time step, energy totals, temperature), alerts, and play/pause/step controls.
- UI components:
  * `ViewportManager` handles sandbox camera transforms, object layering (atoms vs densities), and overlays (field lines, temperature maps).
  * `PeriodicTablePanel` renders element grid, highlights selections, and surfaces atomic metadata pulled from `PeriodicTable` repository.
  * `ControlDock` hosts environment sliders (temperature, pressure, EM fields), photon source controls, and future save/load hooks for sandbox states.
  * `InspectorPanel` (toggle) displays atom/molecule analytics, spectra previews, and editing tools for electron excitation/ionization.
- Rendering considerations:
  * Use double buffering and batched draw calls to maintain smooth visualization at MD time steps.
  * Develop modular renderers (atoms, bonds, density fields, vectors) with shared color/legend configuration to keep visual language consistent.
  * Integrate screenshot/export pipeline and, later, optional video capture or frame streaming for sharing simulations.
- Input/interaction model: support mouse/touch gestures for selection and manipulation, keyboard shortcuts for simulation control, and context menus for atom operations.
- Reference: see `docs/ui_layout.md` for expanded layout composition, interaction patterns, and performance considerations.
- Rendering implementation strategy detailed in `docs/pygame_rendering.md`; pygame app scaffold lives in `src/ui/app.py`.

System Architecture Blueprint
-----------------------------
- Core engine loop: gather forces from classical potentials, orbital interactions, and electron dynamics (tier-dependent) before integrator updates state.
- Data layer:
  * `PeriodicTable` repository loads atomic constants (Z, mass, electronegativity, ionization energies, radii, orbital metadata).
  * `PotentialLibrary` stores parameterized force-field definitions (LJ, Coulomb, ReaxFF-like terms) with versioning and provenance tracking.
  * `SpectralDatabase` caches reference spectra and transition thresholds to validate simulated outputs.
- Modules:
  * `Atom`/`Ion` entities expose state vectors, orbital occupancy, dynamic properties (charges, spin, energy contributions).
  * `ElectronCloud` (tier 3+) represents density distributions; supports sampling, visualization, and interaction with EM fields.
  * `BondNetwork` tracks emergent bonds, bond orders, reaction candidates, and energy accounting.
  * `ForceFieldEngine` orchestrates classical and quantum-inspired force calculations, supporting pluggable kernels.
  * `ReactionManager` evaluates PES approximations, validates energy descent paths, and triggers topological updates.
  * `IntegratorSuite` provides velocity Verlet, symplectic alternatives, and thermostat hooks.
  * `EnvironmentController` maintains temperature, pressure, EM fields, photon sources, and solvent parameters.
  * `AnalyticsHub` aggregates observables (energy breakdowns, orbital populations, spectra) and feeds visualizations.
  * `Renderer` consumes state snapshots to produce atoms/bonds, densities, spectra, and instrumentation overlays.
  * `UI/Interaction` layer exposes inspectors, analyzers, and scenario configuration with undo/redo history.
- Infrastructure:
  * Modular plugin system to swap potential models, visualization styles, or integrators without core rewrites.
  * Deterministic random seeding across CPU/GPU paths for reproducibility.
  * Profiling hooks and telemetry to monitor performance hotspots, energy drift, and simulation health.

Data Pipeline & Resource Requirements
-------------------------------------
- Assemble atomic reference data from NIST, PubChem, or CRC Handbook; normalize units (SI) and store in version-controlled JSON/CSV.
- Collect orbital parameters (Slater-type orbital exponents, hybridization angles) from quantum chemistry literature; document approximation level and validity range.
- Curate force-field parameters for baseline elements (H, C, N, O, halogens, metals) from OPLS/AMBER/ReaxFF sources; note licensing constraints.
- Precompute lookup tables for orbital overlaps, bond energy curves, and spectroscopy benchmarks to accelerate runtime evaluation.
- Define metadata schema for provenance (source, publication, citation) to ensure scientific traceability.
- Establish validation datasets: canonical molecules (H2, H2O, CO2, benzene), crystalline solids (NaCl, diamond), and reaction pathways (combustion, acid-base neutralization).
- Reference: see `docs/data_sources.md` for candidate datasets, provenance workflow, and normalization steps.
- Initial coverage target: prioritize high-confidence data for elements up to lead (Z ≤ 82); leave post-lead entries as placeholders until subsequent data passes.

Data Schema & Configuration Design
----------------------------------
- Periodic table dataset (`periodic_table.json`):
  * Keys: atomic symbol, atomic number, default oxidation states, valence electron configuration, covalent/van der Waals radii, electronegativity, ionization energies, electron affinity, common orbital parameters.
  * Metadata: source citation, measurement conditions, unit descriptors, uncertainty where available.
  * Version control: semantic version tag and checksum to guarantee reproducibility.
- Potential library (`potentials/element_pairs.csv`):
  * Records parameter sets for Lennard-Jones, Coulomb scaling factors, ReaxFF-like coefficients; include valid temperature/pressure ranges.
  * Support multiple named force-field families with inheritance/override to encourage experimentation.
- Spectral reference store (`spectra/*.json`):
  * Contains transition energies, oscillator strengths, IR/Raman active modes, and associated experimental references.
  * Enables validation of simulated spectra and visualization overlays.
- Simulation configuration schema (`config/*.yaml`):
  * Defines system topology (atoms, initial positions/velocities), boundary conditions, selected potentials, integrator settings, thermostat targets, EM field parameters, and output cadence.
  * Includes UI layout preferences (camera, panel visibility) and logging verbosity.
  * Supports exporting/importing sandbox states and batch runs via templating/parameter sweeps.
- Logging & telemetry:
  * Standardize diagnostic channels (energy drift, force magnitudes, performance metrics) with structured output (JSONL) for later analysis.
  * Provide hooks to attach profiling markers around force calculations, integrator steps, and rendering passes.

Implementation Roadmap
----------------------
Phase 1: Build classical MD core with reactive potentials, thermostats, boundary conditions, and baseline visualization.
Phase 2: Integrate quantum-inspired valence model, orbital overlap bonding, energy-based reactions, and improved analytics.
Phase 3: Add dynamic electrons, photon interactions, EM fields, and richer visualization of electron phenomena.
Phase 4: Deliver spectroscopy outputs, thermodynamics reporting, and advanced reaction tracking.
Phase 5: Optimize with GPU acceleration and scaling strategies for large molecular systems; refine UX tooling.

Development Backlog & Milestones
--------------------------------
- Pre-Phase (v0.x groundwork)
  * Finalize data ingestion pipeline skeletons for periodic table, potentials, and spectral references using placeholder datasets.
  * Prototype pygame UI scaffolding with mock atoms and periodic table interactions to validate layout and input handling.
  * Define automated testing harness structure and integrate `Tests_core_checks` scenarios as TODO stubs.
  * Establish coding standards, simulation configuration schema, and logging/profiling utilities.
  * Reference: `docs/first_run_plan.md` for detailed v0.1 task checklist.
  * Reference: `docs/setup_env.md` and `requirements-dev.txt` for dependency installation when running UI/tests locally.
- Phase 1 (Classical MD core)
  * Implement velocity Verlet integrator, force-field plugins (LJ, Coulomb), and thermostat hooks with energy diagnostics.
  * Build neighbor list/space partitioning for efficient force evaluations; verify against tier-1 tests.
  * Connect sandbox viewport to simulation loop with minimal visualization (atoms, bonds inferred by distance).
  * Enable save/load of sandbox configurations (blank by default) so users can store interesting molecules or scenes.
- Phase 2 (Quantum-inspired bonding)
  * Integrate orbital data loader and bonding evaluator (tight-binding/Hückel approximation).
  * Extend visualization to display orbital hybridization and charge distributions.
  * Enable reaction manager to adjust topology based on energy descent; add analytics overlays for HOMO/LUMO.
- Phase 3 (Dynamic electrons)
  * Introduce electron density module with simplified potentials and electron-nucleus interactions.
  * Provide GPU-aware compute path or optimized CPU fallback; synchronize with visualization of density clouds.
  * Implement photon interaction controls and validate ionization/tunneling behaviors.
- Phase 4+ (Advanced analytics & optimization)
  * Expand spectroscopy outputs (IR, Raman, UV-Vis) and thermodynamic reporting dashboards.
  * Enhance UI with workflow automation (experiment recorder, comparative analysis panels).
  * Profile performance at scale, target GPU acceleration upgrades, and explore plugin ecosystem for specialized force fields.

Research & Reference Tools
--------------------------
- LAMMPS (ReaxFF), GROMACS/NAMD for MD techniques, ASE for Python atomic modeling, and PySCF/ORCA/Gaussian for quantum chemistry inspiration.
- Visualization references: Avogadro, ChimeraX, VMD for molecular rendering and analytics.
